// Copyright 2024 Intel Corporation. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: levelzero.proto

package gpulevelzero

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LevelzeroClient is the client API for Levelzero service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LevelzeroClient interface {
	GetDeviceHealth(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceHealth, error)
	GetDeviceTemperature(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceTemperature, error)
	GetIntelIndices(ctx context.Context, in *GetIntelIndicesMessage, opts ...grpc.CallOption) (*DeviceIndices, error)
	GetDeviceMemoryAmount(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceMemoryAmount, error)
}

type levelzeroClient struct {
	cc grpc.ClientConnInterface
}

func NewLevelzeroClient(cc grpc.ClientConnInterface) LevelzeroClient {
	return &levelzeroClient{cc}
}

func (c *levelzeroClient) GetDeviceHealth(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceHealth, error) {
	out := new(DeviceHealth)
	err := c.cc.Invoke(ctx, "/Levelzero/GetDeviceHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelzeroClient) GetDeviceTemperature(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceTemperature, error) {
	out := new(DeviceTemperature)
	err := c.cc.Invoke(ctx, "/Levelzero/GetDeviceTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelzeroClient) GetIntelIndices(ctx context.Context, in *GetIntelIndicesMessage, opts ...grpc.CallOption) (*DeviceIndices, error) {
	out := new(DeviceIndices)
	err := c.cc.Invoke(ctx, "/Levelzero/GetIntelIndices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *levelzeroClient) GetDeviceMemoryAmount(ctx context.Context, in *DeviceId, opts ...grpc.CallOption) (*DeviceMemoryAmount, error) {
	out := new(DeviceMemoryAmount)
	err := c.cc.Invoke(ctx, "/Levelzero/GetDeviceMemoryAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LevelzeroServer is the server API for Levelzero service.
// All implementations must embed UnimplementedLevelzeroServer
// for forward compatibility
type LevelzeroServer interface {
	GetDeviceHealth(context.Context, *DeviceId) (*DeviceHealth, error)
	GetDeviceTemperature(context.Context, *DeviceId) (*DeviceTemperature, error)
	GetIntelIndices(context.Context, *GetIntelIndicesMessage) (*DeviceIndices, error)
	GetDeviceMemoryAmount(context.Context, *DeviceId) (*DeviceMemoryAmount, error)
	mustEmbedUnimplementedLevelzeroServer()
}

// UnimplementedLevelzeroServer must be embedded to have forward compatible implementations.
type UnimplementedLevelzeroServer struct {
}

func (UnimplementedLevelzeroServer) GetDeviceHealth(context.Context, *DeviceId) (*DeviceHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceHealth not implemented")
}
func (UnimplementedLevelzeroServer) GetDeviceTemperature(context.Context, *DeviceId) (*DeviceTemperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTemperature not implemented")
}
func (UnimplementedLevelzeroServer) GetIntelIndices(context.Context, *GetIntelIndicesMessage) (*DeviceIndices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntelIndices not implemented")
}
func (UnimplementedLevelzeroServer) GetDeviceMemoryAmount(context.Context, *DeviceId) (*DeviceMemoryAmount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceMemoryAmount not implemented")
}
func (UnimplementedLevelzeroServer) mustEmbedUnimplementedLevelzeroServer() {}

// UnsafeLevelzeroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LevelzeroServer will
// result in compilation errors.
type UnsafeLevelzeroServer interface {
	mustEmbedUnimplementedLevelzeroServer()
}

func RegisterLevelzeroServer(s grpc.ServiceRegistrar, srv LevelzeroServer) {
	s.RegisterService(&Levelzero_ServiceDesc, srv)
}

func _Levelzero_GetDeviceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelzeroServer).GetDeviceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Levelzero/GetDeviceHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelzeroServer).GetDeviceHealth(ctx, req.(*DeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Levelzero_GetDeviceTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelzeroServer).GetDeviceTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Levelzero/GetDeviceTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelzeroServer).GetDeviceTemperature(ctx, req.(*DeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Levelzero_GetIntelIndices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntelIndicesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelzeroServer).GetIntelIndices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Levelzero/GetIntelIndices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelzeroServer).GetIntelIndices(ctx, req.(*GetIntelIndicesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Levelzero_GetDeviceMemoryAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LevelzeroServer).GetDeviceMemoryAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Levelzero/GetDeviceMemoryAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LevelzeroServer).GetDeviceMemoryAmount(ctx, req.(*DeviceId))
	}
	return interceptor(ctx, in, info, handler)
}

// Levelzero_ServiceDesc is the grpc.ServiceDesc for Levelzero service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Levelzero_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Levelzero",
	HandlerType: (*LevelzeroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceHealth",
			Handler:    _Levelzero_GetDeviceHealth_Handler,
		},
		{
			MethodName: "GetDeviceTemperature",
			Handler:    _Levelzero_GetDeviceTemperature_Handler,
		},
		{
			MethodName: "GetIntelIndices",
			Handler:    _Levelzero_GetIntelIndices_Handler,
		},
		{
			MethodName: "GetDeviceMemoryAmount",
			Handler:    _Levelzero_GetDeviceMemoryAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "levelzero.proto",
}
